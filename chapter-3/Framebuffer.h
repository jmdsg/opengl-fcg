#ifndef FRAMEBUFFER_H
#define FRAMEBUFFER_H

#include <Core\gl_core_4_3.h>

namespace nFramebuffer{

	enum targets{
		DEFAULT_TARGET = GL_FRAMEBUFFER,
		READ_TARGET = GL_READ_FRAMEBUFFER,
		DRAW_TARGET = GL_DRAW_FRAMEBUFFER,
	};

	enum attachments{
		DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT,
		COLOR_ATTACHMENT_0 = GL_COLOR_ATTACHMENT0,
		COLOR_ATTACHMENT_1 = GL_COLOR_ATTACHMENT1,
		COLOR_ATTACHMENT_2 = GL_COLOR_ATTACHMENT2,
		COLOR_ATTACHMENT_3 = GL_COLOR_ATTACHMENT3,
		COLOR_ATTACHMENT_4 = GL_COLOR_ATTACHMENT4,
		COLOR_ATTACHMENT_5 = GL_COLOR_ATTACHMENT5,
		COLOR_ATTACHMENT_6 = GL_COLOR_ATTACHMENT6,
		COLOR_ATTACHMENT_7 = GL_COLOR_ATTACHMENT7,
		COLOR_ATTACHMENT_8 = GL_COLOR_ATTACHMENT8,
		COLOR_ATTACHMENT_9 = GL_COLOR_ATTACHMENT9,
		STENCIL_ATTACHMENT = GL_STENCIL_ATTACHMENT,
		COLOR_ATTACHMENT_10 = GL_COLOR_ATTACHMENT10,
		COLOR_ATTACHMENT_11 = GL_COLOR_ATTACHMENT11,
		COLOR_ATTACHMENT_12 = GL_COLOR_ATTACHMENT12,
		COLOR_ATTACHMENT_13 = GL_COLOR_ATTACHMENT13,
		COLOR_ATTACHMENT_14 = GL_COLOR_ATTACHMENT14,
		COLOR_ATTACHMENT_15 = GL_COLOR_ATTACHMENT15,
		DEPTH_STENCIL_ATTACHMENT = GL_DEPTH_STENCIL_ATTACHMENT,
		FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
		FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
	};

};

class CFramebuffer{

protected:

	GLuint mWidth, mHeight, mFramebuffer, mRenderbuffer, mTexture;

	CFramebuffer();
	~CFramebuffer();

public:

	GLuint getWidth();
	GLuint getHeight();
	GLuint getTextureID();
	void use(nFramebuffer::targets nTarget);
	void unUse(nFramebuffer::targets nTarget);
	virtual void init(const GLuint nWidth, const GLuint nHeight) = 0;

};

#endif